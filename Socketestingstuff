using System;
using System.Collections.Concurrent;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

class Program
{
    private static ConcurrentDictionary<string, (TcpClient client, string ipAddress, bool inChatMode, bool echoMode, bool singleKeyPressMode)> clients = new ConcurrentDictionary<string, (TcpClient, string, bool, bool, bool)>();
    private static GameMap gameMap = new GameMap(128, 32);
  

    static void Main(string[] args)
    {
        TcpListener server = null;
        try
        {
            Int32 port = 25;
            IPAddress localAddr = IPAddress.Parse("0.0.0.0");

            server = new TcpListener(localAddr, port);
            server.Start();

            while (true)
            {
                Console.WriteLine("Waiting for a connection... ");
                TcpClient client = server.AcceptTcpClient();
                Console.WriteLine("Connected!");
                string clientId = Guid.NewGuid().ToString();
                gameMap.SetInitialPosition(clientId);
              
                string clientIP = ((IPEndPoint)client.Client.RemoteEndPoint).Address.ToString();

                // Initialize the inChatMode and echoMode to false when adding a new client
                clients.TryAdd(clientId, (client, clientIP, false, false,false));

                Thread clientThread = new Thread(new ParameterizedThreadStart(HandleClient));
                clientThread.Start(new Tuple<string, TcpClient, string>(clientId, client, clientIP));
            }
        }
        catch (SocketException e)
        {
            Console.WriteLine("SocketException: {0}", e);
        }
        finally
        {
            server?.Stop();
        }
    }
    static void SendBeepToClient(NetworkStream stream)
    {
        byte[] beep = new byte[] { 0x07 };
        stream.Write(beep, 0, beep.Length);
    }
    static void HandleClient(object obj)
    {
        var clientInfo = (Tuple<string, TcpClient, string>)obj;
        string clientId = clientInfo.Item1;
        TcpClient client = clientInfo.Item2;
        string clientIP = clientInfo.Item3;
        var stream = client.GetStream();

        // Ask if the client wants single keypress mode
        SendToClient(stream, clientIP, "Single keypress mode? (yes/no)");
        string singleKeyPressResponse = ReadLineFromClient(stream);
        bool singleKeyPressMode = singleKeyPressResponse.Trim().ToLower() == "yes";

        StringBuilder clientBuffer = new StringBuilder();

        try
        {
            while (true)
            {
                byte[] bytes = new byte[1]; // Read one byte (character) at a time
                int bytesRead = stream.Read(bytes, 0, bytes.Length);

                if (bytesRead == 0) // Client has disconnected
                    break;

                char receivedChar = Encoding.UTF8.GetChars(bytes)[0];

                if (singleKeyPressMode)
                {
                    // Process each character immediately as a command
                    HandleCommand(clientId, clientIP, receivedChar.ToString(), stream);
                }
                else
                {
                    // Standard mode: wait for line ending (CR/LF)
                    if (receivedChar == '\n' || receivedChar == '\r')
                    {
                        if (clientBuffer.Length > 0) // Process non-empty messages
                        {
                            string data = clientBuffer.ToString().Trim();
                            Console.WriteLine($"Received from {clientId} ({clientIP}): {data}");
                            clientBuffer.Clear(); // Reset the buffer after processing
                           // SendBeepToClient(stream);
                            // Handle the complete command or message
                            HandleCommand(clientId, clientIP, data, stream);
                        }
                    }
                    else
                    {
                        clientBuffer.Append(receivedChar); // Append only non-line-ending characters
                    }
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception: {0}", e.ToString());
        }
        finally
        {
            clients.TryRemove(clientId, out _);
            client.Close();
            Console.WriteLine($"Client {clientId} ({clientIP}) disconnected");
        }
    }
    public static void DisplayAnsiArtwork()

    {
        // ANSI color codes for foreground
        string[] colors = {
        "\x1b[30m", // Black
        "\x1b[31m", // Red
        "\x1b[32m", // Green
        "\x1b[33m", // Yellow
        "\x1b[34m", // Blue
        "\x1b[35m", // Magenta
        "\x1b[36m", // Cyan
        "\x1b[37m"  // White
    };

        // Characters to display
        char[] characters = { '#', '*', '+', '@', '%', '&', '?', '!' };

        // Displaying the grid
        for (int charIndex = 0; charIndex < characters.Length; charIndex++)
        {
            for (int colorIndex = 0; colorIndex < colors.Length; colorIndex++)
            {
                // Normal intensity
                Console.Write(colors[colorIndex] + characters[charIndex] + " ");

                // High intensity (bright)
                Console.Write("\x1b[1m" + colors[colorIndex] + characters[charIndex] + "\x1b[22m" + " ");
            }
            Console.WriteLine();
            Console.ResetColor(); // Reset color at the en
        }
    }

       
        public static void LoadGameMap()
    {
        
        string asciiMap = @"
...............................................................................................................................
TTTT           ^^^      TTTT                                                                                     ~~~           
 TTTT          ~ ~      TTTT                                                                                     ~~~           
               ~ ~                                                                                ^^^^^^^        ~~~           
   ^^^         ~ ~                       ^^^^^^^^^^^^^^^^^^                                        ~~~           ~~~           
   ^^^         ~ ~                      ^^                ^^                                       ~~~           ~~~           
   ^^^                                  ^^    ~~~~~~    ^^            TTTTTT                       ~~~           ~~~           
                                        ^^    ~~~~~~    ^^            TTTTTT                       ~~~           ~~~           
             CCCC                       ^^    ~~~~~~    ^^                                            
    VVVVV   CCCC   VVVVV               ^^                ^^                                            
    VVVVV         VVVVV                ^^^^^^^^^^^^^^^^^^                                              
                   VVVVV                                                                                     
                         TTTT                                                                                
                         TTTT                                                                                
           ##   ##                                                                                           
           ##   ##                                                                                           
                         *                                                                                   
                                                                                                             
                                                                                                             
           ~~~~~~~                                                                                           
           ~~~~~~~                                                                                           
           ~~~~~~~                                                                                           
                                                                                                             
            DDDD                                                                                             
            DDDD                                                                                             
                                                                                                             
                                                                                                             
                 TTTT                                                                                        
                 TTTT                                                                                        
           ^^^^                                                                                              
           ^^^^                                                                                              
           ^^^^                                                                                              
................................................................................................................";

        gameMap.LoadAsciiMap(asciiMap);
    }


    static void BroadcastMessage(string senderId, string message)
    {
        foreach (var client in clients)
        {
            if (client.Key != senderId && client.Value.inChatMode) // Send to clients in chat mode, excluding the sender
            {
                TcpClient tcpClient = client.Value.client;
                NetworkStream stream = tcpClient.GetStream();
                SendToClient(stream, client.Value.ipAddress, message);
            }
        }
    }

    static void SendToClient(NetworkStream stream, string clientIP, string message)
    {
        byte[] msgBuffer = Encoding.UTF8.GetBytes(message + "\r\n");
        stream.Write(msgBuffer, 0, msgBuffer.Length);
        Console.WriteLine($"Sent to {clientIP}: {message}");
    }

    static string AnsiColor(string message, string colorCode)
    {
        return "\u001b[" + colorCode + "m" + message + "\u001b[0m";  // ANSI reset at the end
    }
    static void MovePlayer(string playerId, int deltaX, int deltaY)
    {
        var currentPosition = gameMap.GetPlayerPosition(playerId);
        int newX = Math.Max(0, Math.Min(currentPosition.x + deltaX, GameMap.Width - 1));
        int newY = Math.Max(0, Math.Min(currentPosition.y + deltaY, GameMap.Height - 1));

        gameMap.UpdatePlayerPosition(playerId, newX, newY);
    }

    static void HandleCommand(string clientId, string clientIP, string data, NetworkStream stream)
    {
 

        if (data.ToLower() == "8") // Move up
        {
            MovePlayer(clientId, 0, -1);
            string mapDisplay = gameMap.RenderMap();
            SendToClient(stream, clientIP, mapDisplay);
        }
        else if (data.ToLower() == "2") // Move down
        {
            MovePlayer(clientId, 0, 1);
            string mapDisplay = gameMap.RenderMap();
            SendToClient(stream, clientIP, mapDisplay);
        }
        else if (data.ToLower() == "4") // Move left
        {
            MovePlayer(clientId, -1, 0);
            string mapDisplay = gameMap.RenderMap();
            SendToClient(stream, clientIP, mapDisplay);
        }
        else if (data.ToLower() == "6") // Move right
        {
            MovePlayer(clientId, 1, 0);
            string mapDisplay = gameMap.RenderMap();
            SendToClient(stream, clientIP, mapDisplay);
        }
        else if (data.ToLower() == "showmap")
        {
            string mapDisplay = gameMap.RenderMap();
            SendToClient(stream, clientIP, mapDisplay);
        }
        else if (data.ToLower() == "stats")
        {
             
            SendToClient(stream, clientIP, DisplayCharacterStats(234,18,18,18,19,12,8,32,1,10,1));
        }
        else if (data.ToLower() == "art")
        {
            DisplayAnsiArtwork();

           //SendToClient(stream, clientIP, mapDisplay);
        }
        else if (data.ToLower() == "load")
        {
            LoadGameMap();

         

            string mapDisplay = gameMap.RenderMap();
            SendToClient(stream, clientIP, mapDisplay);
        }
        if (data.ToLower() == "quit")
        {
            SendToClient(stream, clientIP, "Disconnecting...");
            clients[clientId].client.Close();
            clients.TryRemove(clientId, out _);
            Console.WriteLine($"Client {clientId} ({clientIP}) disconnected");
        }
        else if (data.ToLower() == "who")
        {
            string activeClients =AnsiColor( "Active Clients:\n","32");
            foreach (var c in clients)
            {
                activeClients += $"{c.Key} (IP: {c.Value.ipAddress})\n";
            }
            SendToClient(stream, clientIP, activeClients);
        }
        else if (data.ToLower().StartsWith("set "))
        {
            // Extracting coordinates from the command
            string[] parts = data.Split(new char[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length == 3 && int.TryParse(parts[1], out int x) && int.TryParse(parts[2], out int y))
            {
                // Update player position
                gameMap.UpdatePlayerPosition(clientId, x, y);
                SendToClient(stream, clientIP, $"Position set to X={x}, Y={y}");
            }
            else
            {
                SendToClient(stream, clientIP, "Invalid command format. Use 'set x,y'");
            }
        }


        else if (data.ToLower() == "menu")
        {
            DisplayMenu(stream, clientIP);
        }
        else if (data.ToLower() == "showmap")
        {
            // Call RenderMap and send the result to the client
            string mapDisplay = gameMap.RenderMap();
            SendToClient(stream, clientIP, mapDisplay);
        }
        else if (data.ToLower() == "locate")
        {
            // Retrieve and send the player's current position
            var position = gameMap.GetPlayerPosition(clientId);
            string positionMessage = $"Your current position: X={position.x}, Y={position.y}";
            SendToClient(stream, clientIP, positionMessage);
        }
        else if (data.ToLower() == "chat")
        {
            var clientData = clients[clientId];
            clientData.inChatMode = !clientData.inChatMode;
            clients[clientId] = clientData;

            SendToClient(stream, clientIP, clientData.inChatMode ? "Entered chat room. Type 'chat' again to exit." : "Exited chat room.");
        }
        else
        {
            // For other commands or normal messages
            if (clients[clientId].inChatMode)
            {
                BroadcastMessage(clientId, $"[{clientId}]: {data}");
            }
            else if (clients[clientId].echoMode) // Check echo mode here
            {
                SendToClient(stream, clientIP, $"Echo: {data}");
            }
        }
    }
    public static string DisplayCharacterStats(int hp, int str, int intelligence, int wis, int dex, int chr, int gold, int silver, int level, int ac, int enc)
    {
        string[] lines = {
        "HP: " + hp.ToString().PadRight(9),
        "Str: " + str.ToString().PadRight(8),
        "Int: " + intelligence.ToString().PadRight(7),
        "Wis: " + wis.ToString().PadRight(8),
        "Dex: " + dex.ToString().PadRight(8),
        "Chr: " + chr.ToString().PadRight(8),
        "Gold: " + gold.ToString().PadRight(7),
        "Silver: " + silver.ToString().PadRight(6),
        "Level: " + level.ToString().PadRight(7),
        "AC: " + ac.ToString().PadRight(11),
        "Enc: " + enc.ToString().PadRight(10)
    };

        string topBottomBorder = new string('-', 20);
        string title = "Character Stats";
        string box = topBottomBorder + "\r\n|" + title.PadRight(14) + "|\r\n" + topBottomBorder;

        foreach (var line in lines)
        {
            box += "\r\n|" + line.PadRight(19) + "|";
        }

        box += "\r\n" + topBottomBorder;

        return box;
    }


    public static string MoveCursor(int x, int y)
        {
            return $"\u001b[{y};{x}H";
        }
    
    static void DisplayMenu(NetworkStream stream, string clientIP)
    {
        StringBuilder menuBuilder = new StringBuilder();
        menuBuilder.AppendLine(MoveCursor(20,2 ) + "==== MENU ====");
        menuBuilder.AppendLine("1. Option 1 - Description");
        menuBuilder.AppendLine("2. Option 2 - Description");
        menuBuilder.AppendLine("3. Option 3 - Description");
        menuBuilder.AppendLine("Type the command to select an option.");
        menuBuilder.AppendLine("================");

        SendToClient(stream, clientIP, menuBuilder.ToString());
    }
    private static string ReadLineFromClient(NetworkStream stream)
    {
        StringBuilder data = new StringBuilder();
        while (true)
        {
            byte[] buffer = new byte[1];
            int bytesRead = stream.Read(buffer, 0, buffer.Length);
            if (bytesRead == 0) break; // Connection closed

            char c = Encoding.UTF8.GetChars(buffer)[0];
            if (c == '\n' || c == '\r') break;
            data.Append(c);
        }
        return data.ToString();
    }
}
public class GameMap
{
    private readonly int[,] map;
    private readonly object mapLock = new object();
    public static readonly int Width = 128;
    public static readonly int Height = 32;
    // Definition of playerPositions
    private readonly ConcurrentDictionary<string, (int x, int y)> playerPositions;

  

    public (int x, int y) GetPlayerPosition(string playerId)
    {
        if (playerPositions.TryGetValue(playerId, out var position))
        {
            return position;
        }
        else
        {
            // Return a default position or indicate player not found
            return (-1, -1); // Indicates player position is not set
        }
    }


    public void SetInitialPosition(string playerId)
    {
        // Setting the initial position to (5,5) for every player
        UpdatePlayerPosition(playerId, 5, 5);
    }
    public GameMap(int width, int height)
    {
        map = new int[width, height];
        playerPositions = new ConcurrentDictionary<string, (int x, int y)>();
    }
    public void UpdatePlayerPosition(string playerId, int x, int y)
    {
        if (x >= 0 && x < Width && y >= 0 && y < Height)
        {
            playerPositions[playerId] = (x, y);
        }
        else
        {
            // Handle invalid position (e.g., log a message or notify the player)
        }
    }

    // ... Rest of the GameMap class ...

    public string RenderMap()
    {
        StringBuilder mapBuilder = new StringBuilder("\u001b[2J\u001b[H"); // Clear screen

        lock (mapLock)
        {
            for (int y = 0; y < Height; y++)
            {
                for (int x = 0; x < Width; x++)
                {
                    if (IsPlayerAtPosition(x, y))
                    {
                        // Player's position
                        mapBuilder.Append("\u001b[45m@\u001b[0m"); // Magenta background for player
                    }
                    else
                    {
                        // Terrain rendering
                        int terrainCode = map[x, y];
                        string bgColor = ConvertTerrainCodeToAnsiBackground(terrainCode);
                        char asciiChar = ConvertTerrainCodeToAscii(terrainCode);

                        mapBuilder.Append(bgColor + asciiChar + "\u001b[0m"); // Apply background color and reset
                    }
                }
                mapBuilder.AppendLine();
            }
        }
        return mapBuilder.ToString();
    }




    private bool IsPlayerAtPosition(int x, int y)
    {
        return playerPositions.Values.Any(position => position.x == x && position.y == y);
    }
    public void LoadAsciiMap(string asciiMap)
    {
        string[] rows = asciiMap.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
        for (int y = 0; y < rows.Length; y++)
        {
            for (int x = 0; x < rows[y].Length; x++)
            {
                int terrainCode = ConvertAsciiToTerrainCode(rows[y][x]);
                SetCell(x, y, terrainCode);
            }
        }
    }

    private char ConvertTerrainCodeToAscii(int terrainCode)
    {
        switch (terrainCode)
        {
            case 0: return '.'; // Open land
            case 1: return '#'; // Wall or obstacle
            case 2: return '~'; // Water
            case 3: return '^'; // Mountain
            case 4: return 'T'; // Trees or forest
            case 5: return '*'; // Point of interest
            // ... other cases ...
            default: return ' '; // Unknown or default terrain
        }
    }
    private int ConvertAsciiToTerrainCode(char asciiChar)
    {
        switch (asciiChar)
        {
            case '.': return 0; // Open land
            case '#': return 1; // Wall or obstacle
            case '~': return 2; // Water
            case '^': return 3; // Mountain
            case 'T': return 4; // Trees or forest
            case '*': return 5; // Point of interest
            case '@': return 6; // Player's starting position
            // ... other cases ...
            default: return -1; // Unknown or default terrain
        }
    }
    // Set the value of a cell with specified terrain, item, status, and reserved byte
    private string ConvertTerrainCodeToAnsiBackground(int terrainCode)
    {
        // ANSI Background Color Codes
        const string reset = "\u001b[0m";
        const string blackBg = "\u001b[40m";
        const string redBg = "\u001b[41m";
        const string greenBg = "\u001b[42m";
        const string yellowBg = "\u001b[43m";
        const string blueBg = "\u001b[44m";
        const string magentaBg = "\u001b[45m";
        const string cyanBg = "\u001b[46m";
        const string whiteBg = "\u001b[47m";

        switch (terrainCode)
        {
            case 0: return blackBg; // Open land
            case 1: return redBg;   // Wall or obstacle
            case 2: return blueBg;  // Water
            case 3: return yellowBg;// Mountain
            case 4: return greenBg; // Trees or forest
            case 5: return magentaBg;// Point of interest
                                     // ... other cases ...
            default: return reset;  // Reset to default
        }
    }


    public void SetCell(int x, int y, int terrainCode)
    {
        lock (mapLock)
        {
            if (x >= 0 && x < Width && y >= 0 && y < Height)
            {
                map[x, y] = terrainCode;
            }
            else
            {
                // Handle invalid position (e.g., log a message or notify)
            }
        }
    }

    // Get the value of a cell and decode it into its components
    public (byte terrain, byte item, byte status, byte reserved) GetCell(int x, int y)
    {
        lock (mapLock)
        {
            int value = map[x, y];
            // Decoding the integer back into bytes
            byte terrain = (byte)(value & 0xFF);       // Terrain type
            byte item = (byte)((value >> 8) & 0xFF);   // Object/Item present
            byte status = (byte)((value >> 16) & 0xFF); // Status/State flags
            byte reserved = (byte)((value >> 24) & 0xFF); // Reserved byte
            return (terrain, item, status, reserved);
        }
    }
}
